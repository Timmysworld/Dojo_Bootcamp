There are a few things to double check each time you create a .java file.

1. File and class names must match.
    The file name and class name need to be exactly the same, or it wonâ€™t compile. 
    In this case, Test.java and class Test

2. File and class names should be Pascal case.
    The file name and class name should be written Pascal case. 
    It should start with an uppercase letter and start each word with another capital letter. 
    For example, a class file with all the methods (functions) for a bank account would be called BankAccount.java and class BankAccount

3. Every time you make a change to your code, you will need to re-compile it.

CASTING  
    1. Explicit Casting - Explicit casting is when we declare the type that we want to convert to in our source code. 

    2. Implicit Casting  -  Depending on the context, Java will implicitly cast types for us. 

PRIMITIVE VS OBJECTIVE -- when should we use each and why?

    1.Performance: Object types are an instance of a class. They usually hold data and methods. Therefore, their memory capacity is much bigger than their primitive counterpart. Let's look at an example:

    2.null values: Primitive data types can only hold data. However, Object types are pointers to where the data is stored. This means that this pointer can point to nothing (null), while primitive types cannot.

ARRAYS 
    1. int[] myArray = {4, 8, 8, 5, 9}; 
        int[] myArray = new int[5] <- initialize

        A. to initialize a hard-coded basic array, you use curly braces instead of square brackets.

        B. FIXED ARRAY = Fixed Size you will not be able to push or pop from that array.

        C. [I@6bc7c054 = it's actually the default string representation of the array. The [I means it's an array of type int and @6bc7c054 is the address at which the array is stored. 
HASHMAP
    1. Iterating over a HashMap
        a. a typical way to loop over a HashMap is by first producing a set of the map's keys using the keySet() method of the HashMap class. A Set is similar to a HashMap, however, instead of key-value pairs, it has only values. But Set values are unique values.
        b. Sets can be iterated over with an enhanced for loop, so if you have the set of keys from your HashMap, you can access the values in your map using each key as you iterate.
        c. a Set is what we call an interface. 
            c1. an interface is an " any " type
        d. DEFINITION: a Set is a collection that contains no duplicates,
        e. You can do a quite a bit more with HashMaps. 
            e1. Some of the most common used methods are:
                - clear, 
                - containsKey, 
                - containsValue,
                - isEmpty, 
                - keySet, 
                - remove, 
                - replace, 
                - size, 
                -values. 

MEMBER VARIABLES 
    1. In Java, attributes are referred to as member variables or fields. There are three types of variables in Java, and it is important to differentiate the different types of variables that can be in a Java class:

        A. Member variables - object attributes or fields that belong to a data type or class.
            A1. Note: You will see member variables called members, attributes, instance variables, fields, and properties. These all refer to the same thing, but in Java they are typically referred to as member variables.

        B. Local variables - variables within methods code blocks that are not member variables (these are the primary type of variable you have been using so far). You can think of them as more temporary, since they vanish when the method ends (goes out of scope or returns).

        C. Parameter variables - those that are declared in your method signature (between the parentheses!) which are also temporary.
        
OBJECTS AND CLASSES
    1. An Object is a collection of behaviors and properties that all revolve around the same concept; this collection of behaviors and properties are called instance members. 

CONSTRUCTORS 
    1. A constructor method is a special function that gets called when an instance of an object is created. The differences between a constructor method and the other methods are:
            -It doesn't have a return type.                 
            -The name of the constructor MUST be the same as the name of the class to which it belongs.                 
            -A constructor is called automatically when a new instance of an object is created.

    2. Constructor methods are used to execute some block of code on object instantiation.

THIS 
    1. Java, the this keyword refers to the current object within the context of an instance method or constructor. 
    2. You can refer to this in any method of your class. There is one case in which you MUST use this: if one of your parameter variables shares the same name as one of your member variables. 

METHODS 
    1. A method is just a function that belongs to a class.

    2.A method can do things like print, get, set, or delete information, or anything else you can think of. We name methods after verbs, like 'getHeight' or 'setSpeed' or 'isValid'.

    3.the most important concepts relating to OOP is that objects only share certain aspects about themselves publicly. The idea is that we can create objects with public methods that deal with how to interact with the object, but we keep all the details about the logic we are performing inside those functions private. 

    4.Every method has the following parts: 
        A. modifiers 
            - private: Only the class in which it is declared can see and access the method. This is the most restrictive access level.
            - protected: Protected access gives subclasses a chance to use the method, while preventing a nonrelated class from trying to use it.
            -public: Every class everywhere has access to the method.

        B. return type 
            -String is a return type that is used to declare that a method returns a String type. Other return types are the data type of whatever your method returns:
                - int, 
                - String, 
                - double, 
                - boolean, 
                - void. 
            In Java, you must specify what data type your method will return; otherwise, it will result in an error.

        C. method name 
            If the method returns 
                a boolean, the convention is to ask a question in the name; that way, the names are read like they would have a question mark at the end. Is the collection empty? Is the user logged in? Does this element have items?We use lowerCamelCase for method names. 

                For non-boolean methods we will use either verbs or get and set for property values, e.g.:getValue(); setValue(); greet(); addToList(); createGreeting();

        D. method body
            The method body defines the instructions that are to be executed when the method is called. It is all the code between the curly braces, { }.
        
        