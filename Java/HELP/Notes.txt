There are a few things to double check each time you create a .java file.

1. File and class names must match.
    The file name and class name need to be exactly the same, or it wonâ€™t compile. 
    In this case, Test.java and class Test

2. File and class names should be Pascal case.
    The file name and class name should be written Pascal case. 
    It should start with an uppercase letter and start each word with another capital letter. 
    For example, a class file with all the methods (functions) for a bank account would be called BankAccount.java and class BankAccount

3. Every time you make a change to your code, you will need to re-compile it.

CASTING  
    1. Explicit Casting - Explicit casting is when we declare the type that we want to convert to in our source code. 

    2. Implicit Casting  -  Depending on the context, Java will implicitly cast types for us. 

PRIMITIVE VS OBJECTIVE -- when should we use each and why?

    1.Performance: Object types are an instance of a class. They usually hold data and methods. Therefore, their memory capacity is much bigger than their primitive counterpart. Let's look at an example:

    2.null values: Primitive data types can only hold data. However, Object types are pointers to where the data is stored. This means that this pointer can point to nothing (null), while primitive types cannot.

ARRAYS 
    1. int[] myArray = {4, 8, 8, 5, 9}; 
        int[] myArray = new int[5] <- initialize

        A. to initialize a hard-coded basic array, you use curly braces instead of square brackets.

        B. FIXED ARRAY = Fixed Size you will not be able to push or pop from that array.

        C. [I@6bc7c054 = it's actually the default string representation of the array. The [I means it's an array of type int and @6bc7c054 is the address at which the array is stored. 
HASHMAP
    1. Iterating over a HashMap
        a. a typical way to loop over a HashMap is by first producing a set of the map's keys using the keySet() method of the HashMap class. A Set is similar to a HashMap, however, instead of key-value pairs, it has only values. But Set values are unique values.
        b. Sets can be iterated over with an enhanced for loop, so if you have the set of keys from your HashMap, you can access the values in your map using each key as you iterate.
        c. a Set is what we call an interface. 
            c1. an interface is an " any " type
        d. DEFINITION: a Set is a collection that contains no duplicates,
        e. You can do a quite a bit more with HashMaps. 
            e1. Some of the most common used methods are:
                - clear, 
                - containsKey, 
                - containsValue,
                - isEmpty, 
                - keySet, 
                - remove, 
                - replace, 
                - size, 
                -values. 
        